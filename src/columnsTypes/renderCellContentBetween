import {columnTypesMap} from './columnsTypes/types.config';

/**
 * Helper function that renders content for cells in the range [from, to], adding to tr.
 *
 * It is assumed that the cells already have the correct cell.attrs, in particular,
 * cell.attrs.type, which is used to know which node type to render.
 * (If not present, defaults to 'text').
 *
 * Like typesEnforcer, this enforces that cells have the correct content for their
 * type, but this is a function to be called from other commands that create cells,
 * while typesEnforcer is a plugin triggered by the user's deselecting a cell.
 */
export function renderCellContentBetween(schema, tr, from, to) {
  // It is convenient to render cells in reverse order, so that we don't have to map later
  // positions past earlier changes.
  const reversedCells = [];
  tr.doc.nodesBetween(from, to, (node, pos) => {
    if (node.type === schema.nodes.table_cell) {
      reversedCells.unshift({cell: node, pos});
    }
  });

  reversedCells.forEach(({cell, pos}) => {
    const typeHandler = columnTypesMap[cell.attrs.type ?? 'text'].handler;
    tr.replaceRangeWith(
      pos + 1,
      pos + cell.nodeSize - 1,
      typeHandler.renderContentNode(
        schema,
        typeHandler.convertContent(cell),
        tr,
        pos
      )
    );
  });
}
